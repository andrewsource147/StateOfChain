{"version":3,"file":"static/webpack/static/development/pages/_app.js.1b0215d032cb18747293.hot-update.js","sources":["webpack:///./app/sagas/userSaga.js"],"sourcesContent":["import { takeLatest, take, put, call, fork, select, takeEvery, all, apply, cancel } from 'redux-saga/effects'\nimport EthereumServices from \"../services/ethereum\"\nimport {newWeb3Instance} from \"../services/web3\"\n\n\nfunction* voteUser(action) {\n    const { user, isVote } = action.payload\n    var ethereum = new EthereumServices()\n\n    try{\n        var dataVote = yield call([ethereum, ethereum.getVoteData], user, isVote)\n        var web3Instance = newWeb3Instance()\n        var userAddr = yield call([web3Instance, web3Instance.getCoinbase])\n        var txObject = {\n            from: userAddr.toLowerCase(),\n            to: ethereum.getStackAddr().toLowerCase(),\n            data: dataVote\n        }\n        console.log(txObject)\n    \n        //send tx\n        var txHash = yield call([web3Instance, web3Instance.sendTx], txObject)\n        console.log(txHash)\n    }catch(err){\n        console.log(err)\n    }\n    \n}\n\nexport default function* userWatcher() {\n  yield takeLatest(\"USER.VOTE_USER\", voteUser)\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAKA;;;AAwBA;AACA;AA9BA;AACA;AACA;AACA;AAEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAEA;AAFA;AAAA;AAKA;AACA;AANA;AAKA;AACA;AANA;AAOA;AACA;AARA;AAOA;AACA;AACA;AACA;AACA;AAHA;AAKA;AACA;AAdA;AAgBA;AACA;AAjBA;AAgBA;AACA;AAjBA;AAAA;AACA;AADA;AAAA;AAAA;AAmBA;AACA;AApBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAuBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;A","sourceRoot":""}