{"version":3,"file":"static/webpack/static/development/pages/_app.js.f6a16e3e96fc04e9e35b.hot-update.js","sources":["webpack:///./app/actions/userActions.js","webpack:///./app/reducers/userReducer.js","webpack:///./app/sagas/userSaga.js","webpack:///./app/services/ethereum.js"],"sourcesContent":["export function voteUser(user, isVote) {\n    return {\n      type: \"USER.VOTE_USER\",\n      payload: {user, isVote}\n    }\n  }\n\n  export function saveTx(txHash){\n    return {\n      type: \"USER.SAVE_TX_HASH\",\n      payload: {txHash}\n    }\n  }\n\n  export function updateUserVotes(users){\n    return {\n      type: \"USER.UPDATE_USER_VOTES\",\n      payload: {users}\n    }\n  }\n  \n\n  export function saveVotes(votes) {\n    return {\n      type: \"USER.SAVE_VOTES\",\n      payload: {votes}\n    }\n  }","export const initialState = {\n  txs: [],\n  users: [\n    {\n      id: 0,\n      address: '0x9559034c287a0e73a9a68288bc27eb8189427aa1',\n      votes: 0\n    },\n    {\n      id: 1,\n      address: '0xd1946aeffc2d053b76fab96117b6f2c7bf395e32',\n      votes: 0\n    },\n    {\n      id: 2,\n      address: '0xd1946aeffc2d053b76fab96117b6f2c7bf395e31',\n      votes: 0\n    },\n  ]\n}\n\nfunction userReducer(state = initialState, action) {\n  switch (action.type) {\n    case \"USER.SAVE_TX_HASH\":\n      const {txHash} = action.payload\n      var txs = state.txs\n      txs.push(txHash)\n      return {\n        ...state,\n        ...{txs: txs}\n      }\n    case \"USER.SAVE_VOTES\":{\n      var {votes} = action.payload\n      var users = state.users\n      for(var i = 0; i< votes.length; i++){\n        users[i].votes = votes[i]\n      }\n      return {\n        ...state,\n        ...{users: users}\n      }\n    }\n    default:\n      return state\n  }\n}\n\nexport default userReducer\n","import { takeLatest, take, put, call, fork, select, takeEvery, all, apply, cancel } from 'redux-saga/effects'\nimport EthereumServices from \"../services/ethereum\"\nimport {newWeb3Instance} from \"../services/web3\"\n\nimport {saveTx, saveVotes} from \"../actions/userActions\"\n\n\nfunction* voteUser(action) {\n    const { user, isVote } = action.payload\n    var ethereum = new EthereumServices()\n\n    try{\n        var dataVote = yield call([ethereum, ethereum.getVoteData], user, isVote)\n        var web3Instance = newWeb3Instance()\n        var userAddr = yield call([web3Instance, web3Instance.getCoinbase])\n        var txObject = {\n            from: userAddr.toLowerCase(),\n            to: ethereum.getStackAddr().toLowerCase(),\n            data: dataVote\n        }\n        //send tx\n        var txHash = yield call([web3Instance, web3Instance.sendTx], txObject)\n        yield put(saveTx(txHash))\n        console.log(txHash)\n    }catch(err){\n        console.log(err)\n    }\n    \n}\n\nfunction* updateUserVote(){\n    const {users} = actionChannel.payload\n    var ethereum = new EthereumServices()\n    var listVotes = []\n    for (var i = 0; i < users.length; i++){\n        var vote = yield call([ethereum, ethereum.getVoteUser], users[i].address)\n        listVotes.push(vote)\n    }\n    yield put(saveVotes(listVotes))\n}\n\nexport default function* userWatcher() {\n  yield takeLatest(\"USER.VOTE_USER\", voteUser)\n  yield takeLatest(\"USER.UPDATE_USER_VOTES\", updateUserVote)\n}\n","import Web3 from \"web3\"\n\n\nconst CONFIG_NETWORK = {\n    endPoint: \"https://ropsten.infura.io/DtzEYY0Km2BA3YwyJcBG\",\n    stackAddr: \"0xB201Ea420F19a167713AdB5bA63436F7238BFde6\",\n    kycAddr: \"0x5a8e6230662bcdc2cd28a4db50509620ed1a1e5e\"\n}\n\nconst STACKVOTES_ABI = [{ \"constant\": true, \"inputs\": [{ \"name\": \"\", \"type\": \"address\" }], \"name\": \"userVotes\", \"outputs\": [{ \"name\": \"\", \"type\": \"uint8\" }], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [{ \"name\": \"_user\", \"type\": \"address\" }, { \"name\": \"_isUpVote\", \"type\": \"uint256\" }], \"name\": \"votesUser\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [{ \"name\": \"_adminAddr\", \"type\": \"address\" }], \"name\": \"transferAdmin\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"admin\", \"outputs\": [{ \"name\": \"\", \"type\": \"address\" }], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": false, \"name\": \"_user\", \"type\": \"address\" }, { \"indexed\": false, \"name\": \"_voter\", \"type\": \"address\" }, { \"indexed\": false, \"name\": \"_isUpVote\", \"type\": \"uint256\" }], \"name\": \"VoteUser\", \"type\": \"event\" }]\nconst KYC_ABI = [{ \"constant\": false, \"inputs\": [{ \"name\": \"_userName\", \"type\": \"string\" }, { \"name\": \"_userEmail\", \"type\": \"string\" }], \"name\": \"addUser\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [{ \"name\": \"_userAddr\", \"type\": \"address\" }], \"name\": \"getUserInfo\", \"outputs\": [{ \"name\": \"\", \"type\": \"address\" }, { \"name\": \"\", \"type\": \"string\" }, { \"name\": \"\", \"type\": \"string\" }], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [{ \"name\": \"_adminAddr\", \"type\": \"address\" }], \"name\": \"transferAdmin\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [{ \"name\": \"_userAddr\", \"type\": \"address\" }], \"name\": \"isUserExisted\", \"outputs\": [{ \"name\": \"\", \"type\": \"bool\" }], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [{ \"name\": \"\", \"type\": \"address\" }], \"name\": \"stackUserMap\", \"outputs\": [{ \"name\": \"userAddr\", \"type\": \"address\" }, { \"name\": \"userName\", \"type\": \"string\" }, { \"name\": \"userEmail\", \"type\": \"string\" }], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"constant\": false, \"inputs\": [{ \"name\": \"_userAddr\", \"type\": \"address\" }], \"name\": \"removeUser\", \"outputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"function\" }, { \"constant\": true, \"inputs\": [], \"name\": \"admin\", \"outputs\": [{ \"name\": \"\", \"type\": \"address\" }], \"payable\": false, \"stateMutability\": \"view\", \"type\": \"function\" }, { \"inputs\": [], \"payable\": false, \"stateMutability\": \"nonpayable\", \"type\": \"constructor\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"name\": \"_userAddr\", \"type\": \"address\" }, { \"indexed\": false, \"name\": \"_userName\", \"type\": \"string\" }, { \"indexed\": false, \"name\": \"_userEmail\", \"type\": \"string\" }], \"name\": \"AddUser\", \"type\": \"event\" }, { \"anonymous\": false, \"inputs\": [{ \"indexed\": true, \"name\": \"_userAddr\", \"type\": \"address\" }], \"name\": \"RemoveUser\", \"type\": \"event\" }]\n\nexport default class EthereumServices {\n    constructor() {\n        this.rpc = new Web3(new Web3.providers.HttpProvider(CONFIG_NETWORK.endPoint, 3000))\n        this.stackContract = new this.rpc.eth.Contract(STACKVOTES_ABI, CONFIG_NETWORK.stackAddr)\n        this.kycContract = new this.rpc.eth.Contract(KYC_ABI, CONFIG_NETWORK.kycAddr)\n    }\n\n    getStackAddr = () => {\n        return CONFIG_NETWORK.stackAddr\n    }\n\n    getVoteData = (_user, _isUpVote) => {\n        var data = this.stackContract.methods.votesUser(_user, _isUpVote).encodeABI()\n        return new Promise((resolve, reject) => {\n            resolve(data)\n        })\n    }\n\n    getVoteUser = (_user) => {\n        return new Promise((resolve, reject) => {\n            this.stackContract.methods.userVotes(_user).call()\n                .then((result) => {\n                    if (result != null) {\n                        resolve(result)\n                    }\n                })\n                .catch((err) => {\n                    reject(err)\n                })\n        })\n    }\n\n}"],"mappings":"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","sourceRoot":""}