{"version":3,"file":"static/webpack/static/development/pages/question.js.5fc401ec43729b8453d0.hot-update.js","sources":["webpack:///./pages/question.js"],"sourcesContent":["\nimport { withRouter } from 'next/router'\nimport Layout from '../app/components/Layout.js'\nimport {Component} from 'react'\nimport {connect} from 'react-redux'\nimport { voteQuestion } from '../app/actions/questionActions'\nimport {voteAnswer} from \"../app/actions/answerActions\";\nimport {voteUser} from \"../app/actions/userActions\";\n\n\n\nclass Question extends Component {\n\n  onVoteQuestion(questionId, isUpvote, user) {\n    this.props.dispatch(voteQuestion(questionId, isUpvote))\n    //submit to blockchain\n    if (isUpvote){\n      this.props.dispatch(voteUser(user, 1))\n    }else{\n      this.props.dispatch(voteUser(user, 0))\n    }\n  }\n\n  onVoteAnswer(answerId, isUpvote, user) {\n    this.props.dispatch(voteAnswer(answerId, isUpvote))\n    if (isUpvote){\n      this.props.dispatch(voteUser(user, 1))\n    }else{\n      this.props.dispatch(voteUser(user, 0))\n    }\n  }\n\n  getListTxs = () =>{ \n    var listTxs = this.props.user.txs.map(txsHash => {\n      return <div>\n        <a key = {txsHash} href={\"https://ropsten.etherscan.io/tx/\" + txsHash}>{txsHash}</a>\n      </div>\n    })\n  }\n  render() {\n    const question = this.props.question.questions[this.props.router.query.id]\n    return (\n      <Layout>\n        {this.props.txs.length > 0 && (\n          <div>\n            <h1>Your txs</h1>\n            <div>\n              {this.getListTxs()}\n            </div>\n          </div>\n        )}\n        <div>\n          <h1>Question #{this.props.router.query.id}: {question.title}</h1>\n          <div>\n            <div style={{marginBottom: 5}}>{question.votes} votes</div>\n            <span style={{marginRight: 10}} onClick={() => this.onVoteQuestion(question.id, true, question.user)}>Upvote</span>\n            <span onClick={() => this.onVoteQuestion(question.id, false,  question.user)}>Downvote</span>\n          </div>\n          <p>{question.content}</p>\n        </div>\n\n        <div>\n          <div>\n            <h3>Answer</h3>\n            <div>User:</div>\n            {this.props.answer.answers.map((answer, i) => (\n              <div key={i}>\n                <div>\n                  <div style={{marginBottom: 5, marginTop: 10}}>{answer.votes} votes</div>\n                  <span style={{marginRight: 10}} onClick={() => this.onVoteAnswer(answer.id, true, question.user)}>Upvote</span>\n                  <span onClick={() => this.onVoteAnswer(answer.id, false, question.user)}>Downvote</span>\n                </div>\n                <p>{answer.content}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </Layout>\n    )\n  }\n}\n\nexport default connect(state => state)(withRouter(Question))\n\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;;;;;;AAqBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;;;;;;AA1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;;;AASA;AAAA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAPA;AAcA;;;;AApEA;AACA;AAsEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;A","sourceRoot":""}